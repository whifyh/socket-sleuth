/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

public class SleuthUI {
    private JPanel panel1;
    private JSplitPane verticalPane;
    private JTable connectionTable;
    private JTable streamTable;
    private JScrollPane streamTableScrollView;
    private JLabel selectedSocketLabel;
    private JSplitPane streamVIewSplitPane;
    private JScrollPane socketConnectionScroll;
    private JSplitPane socketConnectionSplit;

    public SleuthUI() {
        this.connectionTable.setAutoCreateRowSorter(false);
        this.streamTable.setAutoCreateRowSorter(false);
        this.socketConnectionSplit.setDividerLocation(900);
        this.streamVIewSplitPane.setDividerLocation(900);
    }

    public void setStreamVIewSplitPane(Component uiComponent) {
        streamVIewSplitPane.setRightComponent(uiComponent);
    }

    public void setSelectedSocketLabel(int id, String url) {
        // Truncation is needed here otherwise the split pane minimum width ends up at url length
        int maxLength = 100;
        String presentationUrl = url;
        if (url.length() > maxLength) presentationUrl = url.substring(0, maxLength) + "...";
        selectedSocketLabel.setText("WebSocket " + id + " " + presentationUrl);
    }

    public JTable getStreamTable() {
        return streamTable;
    }

    public JPanel getContainer() {
        return panel1;
    }

    public JTable getConnectionTable() {
        return connectionTable;
    }

    public JSplitPane getSocketConnectionSplit() {
        return socketConnectionSplit;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setOrientation(0);
        panel1.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        socketConnectionSplit = new JSplitPane();
        splitPane1.setLeftComponent(socketConnectionSplit);
        socketConnectionScroll = new JScrollPane();
        socketConnectionSplit.setLeftComponent(socketConnectionScroll);
        connectionTable = new JTable();
        socketConnectionScroll.setViewportView(connectionTable);
        streamVIewSplitPane = new JSplitPane();
        splitPane1.setRightComponent(streamVIewSplitPane);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        streamVIewSplitPane.setLeftComponent(panel2);
        selectedSocketLabel = new JLabel();
        selectedSocketLabel.setText("No connection selected");
        panel2.add(selectedSocketLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        streamTableScrollView = new JScrollPane();
        panel2.add(streamTableScrollView, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        streamTable = new JTable();
        streamTableScrollView.setViewportView(streamTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
